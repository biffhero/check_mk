#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import os, sys
from thread import start_new_thread, allocate_lock
try:
    import azure
except:
    sys.stderr.write("You need to install the python azure api (pip install azure)\n")
    sys.exit(1)
from azure.servicemanagement import ServiceManagementService

try:
    from azuremonitor.publishsettings import PublishSettings
except:
    sys.stderr.write("You need to install the azuremonitore api (~doc/check_mk/treasures/azure)\n")
    sys.exit(1)

num_threads = 0
thread_started = False
outputs = []
lock = allocate_lock()
def check_errors(management, hostname):
    global num_threads, thread_started
    lock.acquire()
    num_threads += 1
    thread_started = True
    lock.release()
    try:
        service = management.get_hosted_service_properties(
            hostname,
            embed_detail=True)
    except azure.WindowsAzureMissingResourceError, error:
        lock.acquire()
        num_threads -= 1
        lock.release()
        sys.stderr.write('Hosted service %s not found\n' % hostname)
        return
    output = ""
    output += "<<<<"+hostname+">>>>\n"
    output += "<<<azure_deployments>>>\n"
    if not service.deployments:
        output += "deployments not_found\n"
    for deployment in service.deployments:
        for role_inst in deployment.role_instance_list:
            output += "%s %s %s\n" % ( role_inst.role_name, role_inst.power_state, role_inst.instance_status )
    lock.acquire()
    num_threads -= 1
    outputs.append(output)
    lock.release()

try:
    publishsettings = PublishSettings(sys.argv[1])
except Exception, error:
    sys.stderr.write("Error with Publishsettings file\n")
    sys.exit(1)

pem_path = publishsettings.write_pem()
management = ServiceManagementService(
    subscription_id=publishsettings.sub_id,
    cert_file=pem_path)

hosted_services = management.list_hosted_services()
service_count = 0
for service in hosted_services:
    start_new_thread(check_errors, (management, service.service_name))
    #check_errors(management, service.service_name)


while not thread_started:
    pass
while num_threads > 0:
    pass
os.unlink(pem_path)
print "<<<azure_servicecount>>>"
print service_count

print "".join(outputs)
sys.exit()

