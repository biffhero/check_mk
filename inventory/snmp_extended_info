#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# .1.3.6.1.2.1.47.1.1.1.1.4.10 1
# .1.3.6.1.2.1.47.1.1.1.1.2.10 Chassis Temperature Sensor
# .1.3.6.1.2.1.47.1.1.1.1.5.10 8
# .1.3.6.1.2.1.47.1.1.1.1.7.10 Chassis Temperature Sensor
# .1.3.6.1.2.1.47.1.1.1.1.11.10
# .1.3.6.1.2.1.47.1.1.1.1.13.10


def inv_snmp_extended_info(info):
    map_type = {
        "1"  : "Other",
        "2"  : "Unknown",
        "3"  : "Chassis",
        "4"  : "Backplane",
        "5"  : "Container",
        "6"  : "PSU",
        "7"  : "Fan",
        "8"  : "Sensor",
        "9"  : "Module",
        "10" : "Port",
        "11" : "Stack",
    }

    parsed = {}
    for child, parent, description, child_type, name, serial, model in info:
        parsed.setdefault(child, (parent, description, child_type, name, serial, model))

    for index, (parent, description, entity_type, name, serial, mode) in parsed.items():
        # device itself
        if parent == "0":
            node = inv_tree("hardware.system.")
            if serial:
                node["serial"] = serial
            if model:
                node["model"]  = model
        # backplanes, psus, fans, sensors, modules
        elif entity_type in ["4", "6", "7", "8", "9"]:
            if parsed.get(parent):
                location_info = (map_type[parsed[parent][2]], parent)
            else:
                location_info = ("Missing in ENTITY table", parent)
            node = inv_tree_list("hardware.components.%ss:" % (map_type[entity_type]).lower())
            node.append({
                "index"       : index,
                "name"        : name,
                "description" : description,
                "serial"      : serial,
                "model"       : model,
                "location"    : "%s (%s)" % location_info,
            })

    return node


inv_info['snmp_extended_info'] = {
    'inv_function'       : inv_snmp_extended_info,
    'snmp_info'          : ('.1.3.6.1.2.1.47.1.1.1.1', [
                                  OID_END,
                                  "4",    # entPhysicalContainedIn
                                  "2",    # entPhysicalDescr
                                  "5",    # entPhysicalClass
                                  "7",    # entPhysicalName
                                  "11",   # entPhysicalSerialNum
                                  "13",   # entPhysicalModelName
                           ]),
    'snmp_scan_function' : lambda oid: oid(".1.3.6.1.2.1.47.1.1.1.1.*"),
}
