#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Originally written / contributed by Dave Cundiff

# .1.3.6.1.4.1.318.1.1.12.1.1.0  "sf9pdu1" --> PowerNet-MIB::rPDUIdentName.0
# .1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.1  160 --> PowerNet-MIB::rPDULoadStatusLoad.1 (measured in tenths of Amps)
# .1.3.6.1.4.1.318.1.1.12.2.2.1.1.3.1  12 --> PowerNet-MIB::rPDULoadPhaseConfigNearOverloadThreshold.phase1
# .1.3.6.1.4.1.318.1.1.12.2.2.1.1.4.1  16 --> PowerNet-MIB::rPDULoadPhaseConfigOverloadThreshold.phase1


def parse_apc_rackpdu_power(info):
    parsed = {}
    for host, amperage_str, warn, crit in info:
        amperage = float(amperage_str) / 10

        if amperage >= int(crit):
            status_info = (amperage, (2, "crit exceeded"))
        elif amperage >= int(warn):
            status_info = (amperage, (1, "warn exceeded"))
        else:
            status_info = amperage

        parsed.setdefault(host, {"current" : status_info})

    return parsed


check_info["apc_rackpdu_power"] = {
    'parse_function'        : parse_apc_rackpdu_power,
    'inventory_function'    : inventory_elphase,
    'check_function'        : check_elphase,
    'service_description'   : 'PDU %s',
    'has_perfdata'          : True,
    'snmp_info'             : ('.1.3.6.1.4.1.318.1.1.12', [
                                    '1.1.0',        # PowerNet-MIB::rPDUIdentName
                                    '2.3.1.1.2.1',  # PowerNet-MIB::rPDULoadStatusLoad
                                    '2.2.1.1.3.1',  # PowerNet-MIB::rPDULoadPhaseConfigNearOverloadThreshold
                                    '2.2.1.1.4.1',  # PowerNet-MIB::rPDULoadPhaseConfigOverloadThreshold
                              ]),
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.2.1.1.1.0").lower().startswith("apc web/snmp") and \
                                          oid(".1.3.6.1.4.1.318.1.1.12.1.1.0"),
    'group'                 : 'el_inphase',
    'includes'              : [ 'elphase.include' ],
}
