#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def check_memory_simple(used, total, params):
    # Convert old-style tuple params to dict
    if params:
        if type(params) == tuple:
            params = { "levels" : ("perc_used", params) }
    else:
        params = { "levels" : ("ignore") }


    perc_used = (float(used) / total) * 100
    infotext = "Memory usage: %s (Used: %s, Total: %s)" % (
               get_percent_human_readable(perc_used),
               get_bytes_human_readable(used),
               get_bytes_human_readable(total))

    levelstext = ""

    status = 0
    # No levels imposed
    if params["levels"][0] == "ignore":
        warn_abs, crit_abs = None, None

    # Absolute or percentual levels
    else:
        if params["levels"][0] == "perc_used":
            warn_perc, crit_perc = params["levels"][1]
            warn_abs = (warn_perc / 100.0) * total
            crit_abs = (crit_perc / 100.0) * total
            levelstext = " (warn/crit at %s/%s used)" % (
                         get_percent_human_readable(warn_perc),
                         get_percent_human_readable(crit_perc))

        elif params["levels"][0] == "abs_free":
            warn_abs_free, crit_abs_free = params["levels"][1]
            warn_abs = total - warn_abs_free
            crit_abs = total - crit_abs_free
            levelstext = " (warn/crit below %s/%s free)" % (
                         get_bytes_human_readable(warn_abs_free),
                         get_bytes_human_readable(crit_abs_free))

        if used >= crit_abs:
            status = 2
        elif used >= warn_abs:
            status = 1

        if status:
            infotext += levelstext

    perfdata = [ ("memory_used", used, warn_abs, crit_abs, 0, total) ]
    return status, infotext, perfdata
