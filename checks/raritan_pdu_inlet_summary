#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_raritan_pdu_inlet_summary(info):
    summary = {}
    for sensor_type, decimal_digits, availability, sensor_state, value in info:
        if availability == '1':
            if sensor_type in raritan_map_type:                 # handled sensor types
                key, key_info = raritan_map_type[sensor_type]   # get key for elphase.include
                value = float(value) / 10 ** int(decimal_digits)
                state, state_info = raritan_map_state[sensor_state]

                if state > 0:
                    summary[key] = (value, (state, state_info))
                else:
                    summary[key] = (value, None)

    return { "Summary" : summary }


check_info['raritan_pdu_inlet_summary'] = {
    "parse_function"      : parse_raritan_pdu_inlet_summary,
    "inventory_function"  : inventory_elphase,
    "check_function"      : check_elphase,
    "service_description" : "Input %s",
    "has_perfdata"        : True,
    "group"               : "el_inphase",
    "snmp_info"           : ( ".1.3.6.1.4.1.13742.6", [
                                  OID_END,
                                  "3.3.4.1.7.1.1", # inletDecimalDigits value
                                  "5.2.3.1.2.1.1", # inlet sensor availability
                                  "5.2.3.1.3.1.1", # inlet sensor state
                                  "5.2.3.1.4.1.1", # inlet sensor value
                            ]),
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.6",
    "includes"            : [ 'raritan.include', 'elphase.include' ]
}

