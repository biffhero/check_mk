#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# no used space check for Tablsspaces with CONTENTS in ('TEMPORARY','UNDO')
# It is impossible to check the used space in UNDO and TEMPORARY Tablespaces
# These Types of Tablespaces are ignored in this plugin.
# This restriction is only working with newer agents, because we need an
# additional parameter at end if each datafile


def db_get_tablespace_levels_in_bytes(size_bytes, params):
    # If the magic factor is used, take table size and magic factor
    # into account in order to move levels
    magic  = params.get("magic")

    # Use tablespace size dependent dynamic levels or static levels
    if type(params.get("levels")) == tuple:
        warn, crit = params.get("levels")
    else:
        # A list of levels. Choose the correct one depending on the
        # size of the current tablespace
        for to_size, this_levels in params.get("levels"):
            if size_bytes > to_size:
                warn, crit = this_levels
                break
        else:
            return None, None, "", False

    # warn/crit level are float => percentages of max size, otherwise MB
    if type(warn) == float:
        output_as_percentage = True
        if magic:
            normsize = params["magic_normsize"] * 1024 * 1024
            hbytes_size = size_bytes / float(normsize)
            felt_size = hbytes_size ** magic
            scale = felt_size / hbytes_size
            warn *= scale
            crit *= scale
            max_warning_level, max_critical_level = params["magic_maxlevels"]
            warn = min(warn, max_warning_level)
            crit = min(crit, max_critical_level)
        levels_text = " (warn/crit at %.1f%%/%.1f%%)" % (warn, crit)
        warn_bytes = warn * size_bytes / 100
        crit_bytes = crit * size_bytes / 100

    # Absolute free space in MB
    else:
        output_as_percentage = False
        warn_bytes = warn * 1024 * 1024
        crit_bytes = crit * 1024 * 1024
        levels_text = " (warn/crit at %s/%s)" % (get_bytes_human_readable(warn_bytes), get_bytes_human_readable(crit_bytes))


    return warn_bytes, crit_bytes, levels_text, output_as_percentage
