#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_ibm_imm_voltage(info):
    for line in info:
        yield line[0], None

def check_ibm_imm_voltage(item, _no_params, info):
    for line in info:
        if line[0] == item:
            volt, crit, warn, crit_low, warn_low = map(lambda v: float(v)/1000, line[1:])
            infotext = "%.2f Volt" % volt

            perfdata = [ ("volt", volt, str(warn_low)+":"+str(warn), str(crit_low)+":"+str(crit)) ]
            levelstext = " (levels warn/crit lower: %.1f/%.1f upper: %.1f/%.1f)" % (warn_low, crit_low, warn, crit)

            if (crit_low and volt <= crit_low) or (crit and volt >= crit):
                state = 2
                infotext += levelstext
            elif (warn_low and volt <= warn_low) or (warn and volt >= warn):
                state = 1
                infotext += levelstext
            else:
                state = 0

            return state, infotext, perfdata

check_info["ibm_imm_voltage"] = {
    'check_function'          : check_ibm_imm_voltage,
    'inventory_function'      : inventory_ibm_imm_voltage,
    'service_description'     : 'Voltage %s',
    'has_perdata'             : True,
    'snmp_scan_function'      :
            lambda oid: oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" mips") or \
                        oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" sh4a"),
    'snmp_info'               : ('.1.3.6.1.4.1.2.3.51.3.1.2.2.1', [ # voltTable.voltEntry
                                        #1, # voltIndex
                                        2, # voltDescr
                                        3, # voltReading
                                        #4, # voltNominalReading
                                        #5, # voltNonRecovLimitHigh
                                        6, # voltCritLimitHigh
                                        7, # voltNonCritLimitHigh
                                        #8, # voltNonRecovLimitLow
                                        9, # voltCritLimitLow
                                        10, # voltNonCritLimitLow
                                ]),
}
