#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# 19:1100, 38:822X
# .1.3.6.1.4.1.28507.**.1.5.2.1.2.1 0 --> GUDEADS-EPC****-MIB::epc****OVPStatus.1
# .1.3.6.1.4.1.28507.**.1.5.2.1.2.2 1 --> GUDEADS-EPC****-MIB::epc****OVPStatus.2


factory_settings["gude_powerbank_default_levels"] = {
    "voltage" : (  220,  210 ),
    "current" : (   15,   16 ),
}


def parse_gude_powerbanks(info):
    parsed = {}
    for oid_idx, device_state, energy_str, active_power_str, \
        current_str, volt_str, freq_str, appower_str in info:

        oid, idx = oid_idx.split(".")
        if oid in [ "19" ]:
            map_device_states = { "0" : (2, "off"),
                                  "1" : (0, "on") }
        if oid in [ "38" ]:
            map_device_states = { "0" : (2, "data not active"),
                                  "1" : (0, "data valid") }

        parsed.setdefault(idx, {
            "device_state" : map_device_states[device_state]
        })

        for what, key, factor in [
            (energy_str,       "energy",    1.0),
            (active_power_str, "power",     1.0),
            (current_str,      "current",   0.001),
            (volt_str,         "voltage",   1.0),
            (freq_str,         "frequency", 0.01),
            (appower_str,      "appower",   1.0),]:
            parsed[idx][key] = float(what) * factor

    return parsed


check_info['gude_powerbanks'] = {
    'parse_function'        : parse_gude_powerbanks,
    'inventory_function'    : inventory_elphase,
    'check_function'        : check_elphase,
    'service_description'   : 'Powerbank %s',
    'has_perfdata'            : True,
    'snmp_info'             : ('.1.3.6.1.4.1.28507', [ '19', '38' ], [
                                    OID_END,
                                    "1.5.1.2.1.2",    # GUDEADS-EPC****-MIB::epc****OVPStatus
                                    "1.5.1.2.1.3",    # GUDEADS-EPC****-MIB::epc****AbsEnergyActive
                                    "1.5.1.2.1.4",    # GUDEADS-EPC****-MIB::epc****PowerActive
                                    "1.5.1.2.1.5",    # GUDEADS-EPC****-MIB::epc****Current
                                    "1.5.1.2.1.6",    # GUDEADS-EPC****-MIB::epc****Voltage
                                    "1.5.1.2.1.7",    # GUDEADS-EPC****-MIB::epc****Frequency
                                    "1.5.1.2.1.10",   # GUDEADS-EPC****-MIB::epc****PowerApparent
                              ]),
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.28507.19") or \
                                            oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.28507.38"),
    'default_levels_variable' : 'gude_powerbank_default_levels',
    'group'                   : 'el_inphase',
    'includes'                : [ 'elphase.include' ],
}
