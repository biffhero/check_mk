#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# ------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# ------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<mongodb_connections>>>
# current 68
# available 51132
# totalCreated 108141

factory_settings["mongodb_connections_default_levels"] = {
    'levels_perc': (80.0, 90.0), # Levels at 80%/90% of maximum
}

def inventory_mongodb_connections(info):
    return [("Connections", {})]

def check_mongodb_connections(item, params, info):
    info_dict = dict(map(lambda x: (x[0], x[1]), info))

    current   = int(info_dict["current"])
    available = int(info_dict["available"])
    maximum   = current + available
    used_perc = current / maximum * 100

    state      = 0
    warn, crit = None, None
    extra_info = ""
    if "levels_abs" in params:
        warn, crit = params["levels_abs"]
        if current >= crit:
            state = 2
        elif current >= warn:
            state = 1
        if state :
            extra_info = " (Levels at %s/%s)" % (warn, crit)
    yield state, "Used connections %d%s" % (current, extra_info),\
                    [("connections", current, warn, crit, 0, maximum)]

    state = 0
    extra_info = ""
    warn, crit = params["levels_perc"]
    if used_perc >= crit:
        state = 2
    elif used_perc >= warn:
        state = 1
    if state:
        extra_info = " (Levels at %s%%/%s%%)" % (warn, crit)
    yield state, "Used percentage %.0f%%%s" % (used_perc, extra_info)

    rate = get_rate("total_created", time.time(), int(info_dict["totalCreated"]))
    yield 0, "Rate: %s/sec" % rate, [("connections_rate", rate)]

check_info['mongodb_connections'] = {
    "service_description"     : "MongoDB %s",
    "check_function"          : check_mongodb_connections,
    "inventory_function"      : inventory_mongodb_connections,
    "default_levels_variable" : "mongodb_connections_default_levels",
    "group"                   : "db_connections",
    "has_perfdata"            : True,
}
