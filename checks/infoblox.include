#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def scan_infoblox(oid):
    return "infoblox" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
           oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7779.1")


#   .--services------------------------------------------------------------.
#   |                                     _                                |
#   |                 ___  ___ _ ____   _(_) ___ ___  ___                  |
#   |                / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|                 |
#   |                \__ \  __/ |   \ V /| | (_|  __/\__ \                 |
#   |                |___/\___|_|    \_/ |_|\___\___||___/                 |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def parse_infoblox_services(info):
    map_service_ids = {
        "1"  : "dhcp",
        "2"  : "dns",
        "3"  : "ntp",
        "4"  : "tftp",
        "5"  : "http-file-dist",
        "6"  : "ftp",
        "7"  : "bloxtools-move",
        "8"  : "bloxtools",
        "9"  : "node-status",
        "10" : "disk-usage",
        "11" : "enet-lan",
        "12" : "enet-lan2",
        "13" : "enet-ha",
        "14" : "enet-mgmt",
        "15" : "lcd",
        "16" : "memory",
        "17" : "replication",
        "18" : "db-object",
        "19" : "raid-summary",
        "20" : "raid-disk1",
        "21" : "raid-disk2",
        "22" : "raid-disk3",
        "23" : "raid-disk4",
        "24" : "raid-disk5",
        "25" : "raid-disk6",
        "26" : "raid-disk7",
        "27" : "raid-disk8",
        "28" : "fan1",
        "29" : "fan2",
        "30" : "fan3",
        "31" : "fan4",
        "32" : "fan5",
        "33" : "fan6",
        "34" : "fan7",
        "35" : "fan8",
        "36" : "power-supply1",
        "37" : "power-supply2",
        "38" : "ntp-sync",
        "39" : "cpu1-temp",
        "40" : "cpu2-temp",
        "41" : "sys-temp",
        "42" : "raid-battery",
        "43" : "cpu-usage",
        "44" : "ospf",
        "45" : "bgp",
        "46" : "mgm-service",
        "47" : "subgrid-conn",
        "48" : "network-capacity",
        "49" : "reporting",
        "50" : "dns-cache-acceleration",
        "51" : "ospf6",
        "52" : "swap-usage",
        "53" : "discovery-consolidator",
        "54" : "discovery-collector",
        "55" : "discovery-capacity",
        "56" : "threat-protection",
        "57" : "cloud-api",
        "58" : "threat-analytics",
        "59" : "taxii",
    }

    parsed = {}
    for service_id, status, status_descr in info:
        service_name = map_service_ids[service_id]
        if status not in [ "5", "4" ]:
            parsed.setdefault(service_name, (status, status_descr))

    return parsed


def inventory_infoblox_services(parsed):
    for service_name in parsed:
        yield service_name, None


def check_infoblox_services(item, _no_params, parsed):
    map_states = {
        "1" : (0, "working"),
        "2" : (1, "warning"),
        "3" : (2, "failed"),
        "4" : (3, "inactive"),
        "5" : (3, "unknown")
    }

    if item in parsed:
        status, descr = parsed[item]
        state, state_readable = \
            map_states.get(status, (3, "unexpected(%s)" % status))
        extra_info = ""
        if descr:
            extra_info += " (%s)" % descr
        return state, "Status: %s%s" % (state_readable, extra_info)


#.
#   .--statistics----------------------------------------------------------.
#   |                    _        _   _     _   _                          |
#   |                ___| |_ __ _| |_(_)___| |_(_) ___ ___                 |
#   |               / __| __/ _` | __| / __| __| |/ __/ __|                |
#   |               \__ \ || (_| | |_| \__ \ |_| | (__\__ \                |
#   |               |___/\__\__,_|\__|_|___/\__|_|\___|___/                |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_infoblox_statistics(info):
    return [ (None, None) ]


def check_infoblox_statistics(ty, stats):
    texts    = {}
    perfdata = []
    for what, what_val, what_textfield, what_info in stats:
        texts.setdefault(what_textfield, [])
        texts[what_textfield].append( "%d %s" % (what_val, what_info) )
        perfdata.append( ("%s_%s" % (ty, what), what_val) )

    infotexts = []
    for what, entries in texts.items():
        infotexts.append( "%s: %s" % (what, ", ".join(entries)) )

    return 0, " - ".join(infotexts), perfdata
