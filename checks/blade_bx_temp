#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_blade_bx_temp(item, params, info):
    blade_bx_status = { 1 : "unknown",
                        2 : "sensor-disabled",
                        3 : "ok",
                        4 : "sensor-faild",
                        5 : "warning-temp",
                        6 : "critical-temp",
                        7 : "not-available" }
    for index, status, descr, level_warn, level_crit, temp, crit_react in info:
        status = saveint(status)
        level_crit = saveint(level_crit)
        level_warn = saveint(level_warn)
        temp = saveint(temp)
        if descr != item:
            # wrong item
            continue

        statuscode, message, perfdata =\
                check_temperature(temp, params, "blade_bx_temp_%s" % item, dev_levels=(level_warn, level_crit))

        if crit_react != "2":
            return (2, "Temperature not present or poweroff", perfdata)
        if status != 3:
            return (2, "Status is %s" % blade_bx_status.get(status, 1), perfdata)
        else:
            return statuscode, message, perfdata

    return (3, "Device %s not found in SNMP data" % item, [])

def inventory_blade_bx_temp(info):
    for line in info:
        if int(line[1]) != 7:
            yield line[2], None

def scan_blade_bx_temp(oid):
    return "BX600" in oid(".1.3.6.1.2.1.1.1.0") \
            or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.7244.1.1.1"

check_info['blade_bx_temp'] = {
        'check_function'     : check_blade_bx_temp,
        'inventory_function' : inventory_blade_bx_temp,
        'service_description': 'Temperature Blade %s',
        'has_perfdata'       : True,
        'snmp_info'          : ('.1.3.6.1.4.1.7244.1.1.1.3.4.1.1', [
            1, # index
            2, # status
            3, # desc
            4, # level warn
            5, # level crit
            6, # temp
            7, # crit react
            ]),
        'snmp_scan_function' : scan_blade_bx_temp,
        'group'              : 'temperature',
        'includes'           : ['temperature.include']
        }

