#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Lars Michelsen <lm@mathias-kettner.de>

def format_hp_proliant_name(line):
    return "%s (%s)" % (line[1], hp_proliant_locale[int(line[2])])

def inventory_hp_proliant_temp(info):
    for line in info:
        yield format_hp_proliant_name(line), {}

def check_hp_proliant_temp(item, params, info):
    for line in info:
        if format_hp_proliant_name(line) == item:
            chassis, index, name, value, threshold, status = line

            # This case means no threshold available and
            # the devices' web interface displays "N/A"
            if threshold == "-99":
                devlevels = (None, None)
            else:
                threshold = float(threshold)
                devlevels = (threshold, threshold)

            snmp_status = hp_proliant_status_map[int(status)]

            return check_temperature(float(value), params, "hp_proliant_temp_%s" % item,
                    dev_levels=devlevels,
                    dev_status=hp_proliant_status2nagios_map[snmp_status],
                    dev_status_name="Unit: %s" % snmp_status)
    return 3, "item not found in snmp data"

check_info["hp_proliant_temp"] = {
    'check_function'     : check_hp_proliant_temp,
    'inventory_function' : inventory_hp_proliant_temp,
    'service_description': 'Temperature %s',
    'has_perfdata'       : True,
    'snmp_info'          : ( ".1.3.6.1.4.1.232.6.2.6.8.1", [
                                "1", # cpqHeTemperatureChassis
                                "2", # cpqHeTemperatureIndex
                                "3", # cpqHeTemperatureLocale
                                "4", # cpqHeTemperatureCelsius
                                "5", # cpqHeTemperatureThresholdCelsius
                                "6", # cpqHeTemperatureCondition
        ] ),
    'snmp_scan_function' : lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
    'group'              : 'temperature',
    'includes'           : [ 'temperature.include', 'hp_proliant.include' ]
}
