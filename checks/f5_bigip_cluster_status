#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Dennis Lerch                   dennis.lerch@telekom.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


#SNMPv2-SMI::enterprises.3375.2.1.1.1.1.19.0 = INTEGER: 0  #Version < 11.2
#SNMPv2-SMI::enterprises.3375.2.1.14.3.1.0 = INTEGER: 3    #Version >= 11.2


factory_settings["f5_bigip_cluster_default_levels"] = {
    "type" : "active_standby",
}


def scan_f5_bigip_cluster_status(oid, is_v11_2 = False):
    if not (".1.3.6.1.4.1.3375.2" in oid(".1.3.6.1.2.1.1.2.0") and\
            "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower()):
        return False

    version = oid(".1.3.6.1.4.1.3375.2.1.4.2.0")
    if not version:
        return False

    expected_version = 11.2
    version_float = float(".".join(version.split(".")[:2]))
    return (version_float >= expected_version) == is_v11_2


def parse_f5_bigip_cluster_status(info):
    parsed = {}
    for node, status in info:
        parsed[node] = status
    return parsed


def inventory_f5_bigip_cluster_status(parsed):
    if parsed:
        return [ ( None, None ) ]


def check_f5_bigip_cluster_status(_no_item, params, parsed, is_v11_2 = False):
    if is_v11_2:
        node_states  = ["unknown", "offline", "forced offline", "standby", "active"]
        active_value = 4
    else:
        node_states  = ["standby", "active 1", "active 2", "active"]
        active_value = 3

    if params["type"] == "active_standby" and parsed.values().count(active_value) > 1:
        yield 2, "More than 1 node is active: "
    elif active_value not in parsed.values() and len(parsed) > 1: # Only applies if this check runs on a cluster
        yield 2, "No active node found: "

    for node in sorted(parsed):
        node_name  = node and "[%s] " % node or ""
        node_state = parsed[node]
        state      = 0
        if is_v11_2:
            if node_state in params.get("v11_2_states", []):
                state = params["v11_2_states"][node_state]
            else:
                state = { "0" : 3, "1" : 2, "2" : 2,  "3" : 0,  "4" : 0, }[node_state]
        yield state, "Node %sis %s" % (node_name, node_states[int(node_state)])


check_info["f5_bigip_cluster_status"] = {
    "parse_function"          : parse_f5_bigip_cluster_status,
    "check_function"          : lambda x,y,z: check_f5_bigip_cluster_status(x,y,z, is_v11_2 = False),
    "inventory_function"      : inventory_f5_bigip_cluster_status,
    "node_info"               : True,
    "group"                   : "cluster_status",
    "default_levels_variable" : "f5_bigip_cluster_default_levels",
    "service_description"     : "BIG-IP Cluster Status",
    "snmp_info"               : (".1.3.6.1.4.1.3375.2.1.1.1.1.19", ["0"]), # sysAttrFailoverUnitMask
    "snmp_scan_function"      : lambda oid: scan_f5_bigip_cluster_status(oid, is_v11_2 = False)
}


check_info["f5_bigip_cluster_status_v11_2"] = {
    "parse_function"          : parse_f5_bigip_cluster_status,
    "check_function"          : lambda x,y,z: check_f5_bigip_cluster_status(x,y,z, is_v11_2 = True),
    "inventory_function"      : inventory_f5_bigip_cluster_status,
    "node_info"               : True,
    "group"                   : "cluster_status",
    "default_levels_variable" : "f5_bigip_cluster_default_levels",
    "service_description"     : "BIG-IP Cluster Status",
    "snmp_info"               : (".1.3.6.1.4.1.3375.2.1.14.3.1", ["0"]), # sysCmFailoverStatusId
    "snmp_scan_function"      : lambda oid: scan_f5_bigip_cluster_status(oid, is_v11_2 = True)
}
