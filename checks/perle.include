#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def perle_scan_function(oid):
    return oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.1966.20')


def perle_check_alarms(alarms_str):
    state = 0
    alarminfo = ""
    if int(alarms_str) > 0:
        state = 2
        alarminfo += " (User intervention is needed to resolve the outstanding alarms)"

    return state, "Alarms: %s%s" % (alarms_str, alarminfo)


#   .--modules-------------------------------------------------------------.
#   |                                   _       _                          |
#   |               _ __ ___   ___   __| |_   _| | ___  ___                |
#   |              | '_ ` _ \ / _ \ / _` | | | | |/ _ \/ __|               |
#   |              | | | | | | (_) | (_| | |_| | |  __/\__ \               |
#   |              |_| |_| |_|\___/ \__,_|\__,_|_|\___||___/               |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_perle_cm_modules(info):
    inventory = []
    for name, led, index, \
        fiber_lprf, fiber_link, fiber_conn, fiber_speed, \
        cooper_lprf, copper_link, copper_conn, copper_speed in info:
        inventory.append(("%s %s" % (index, name), None))
    return inventory


def check_perle_cm_modules(item, _no_params, info):
    mappings = {
        "led" : {
            "0" : (2, "no power"),
            "1" : (0, "power to the module"),
            "2" : (0, "loopback enabled"),
        },
        "fiber_lprf" : {
            "0"  : (0, "ok"),
            "1"  : (2, "offline"),
            "2"  : (2, "link fault"),
            "3"  : (2, "auto neg error"),
            # available for cm1110 modules
            "99" : (2, "not applicable"),
        },
        "fiber_link" : {
            "0" : (1, "down"),
            "1" : (0, "up"),
        },
        "fiber_conn" : {
            "0" : "sc",
            "1" : "lc",
            "2" : "st",
            "3" : "sfp",
            "5" : "fc",
            "6" : "mtrj",
        },
        "copper_lprf" : {
            "0" : (0, "ok"),
            "1" : (2, "remote fault"),
        },
        "copper_link" : {
            "0" : (1, "down"),
            "1" : (0, "ok"),
        },
        "copper_conn" : {
            "0" : "rj45"
        },
    }

    for name, led, index, \
        fiber_lprf, fiber_link, fiber_conn, fiber_speed, \
        cooper_lprf, copper_link, copper_conn, copper_speed in info:
        if item == "%s %s" % (index, name):
            state, state_readable = mappings["led"][led]
            yield state, "LED: %s" % state_readable

            for what, lprf, link, speed in [
                ("FIBER",  fiber_lprf,  fiber_link,  fiber_speed),
                ("COPPER", cooper_lprf, copper_link, copper_speed)]:

                yield 0, "%s Speed: %s" % (what, get_nic_speed_human_readable(float(speed)))

                for what_state, what_key in [
                    (lprf, "LPRF"), (link, "Link")]:
                    state, state_readable = mappings["%s_%s" % (what.lower(), what_key.lower())][what_state]
                    yield state, "%s: %s" % (what_key, state_readable)
