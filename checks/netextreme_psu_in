#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.1916.1.1.1.27.1.9.1 52550 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsage.1
# .1.3.6.1.4.1.1916.1.1.1.27.1.9.2 43700 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsage.2
# .1.3.6.1.4.1.1916.1.1.1.27.1.11.1 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsageUnitMultiplier.1
# .1.3.6.1.4.1.1916.1.1.1.27.1.11.2 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsageUnitMultiplier.2

# Just an assumption
factory_settings["netextreme_psu_in_default_levels"] = {
    "power"   : (110, 120), # This levels a recomended by the manufactorer
}

def parse_netextreme_psu_in(info):
    parsed = {}
    for psu_index, psu_usage_str, psu_factor_str in info:
        power = float(psu_usage_str) * pow(10, int(psu_factor_str))
        if power > 0:
            parsed["Input %s" % psu_index] = {
                "power"   : power,
            }
    return parsed


check_info['netextreme_psu_in'] = {
    'parse_function'            : parse_netextreme_psu_in,
    'inventory_function'        : inventory_elphase,
    'check_function'            : check_elphase,
    'service_description'       : 'Power Supply %s',
    'has_perfdata'              : True,
    'snmp_info'                 : (".1.3.6.1.4.1.1916.1.1.1.27.1", [
                                        OID_END, # Power Supply Index
                                        "9",     # extremePowerSupplyInputPowerUsage
                                        "11",    # extremePowerSupplyInputPowerUsageUnitMultiplier
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1916.2"),
    'group'                     : "el_inphase",
    'default_levels_variable'   : "netextreme_psu_in_default_levels",
    'includes'                  : [ "elphase.include" ],
}
