#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['ups_modulys_outphase_default_levels'] = {
}

def parse_ups_modulys_outphase(info):
    parsed = {}
    parsed["Phase 1"] = {
        "frequency"     : int(info[0][1]) / 10.0,
        "voltage"       : int(info[0][3]) / 10.0,
        "current"       : int(info[0][4]) / 10.0,
        "power"         : int(info[0][5]),
        "output_load"   : int(info[0][6]),
    }

    if info[0][2] == '3':
        parsed["Phase 2"] = {
            "frequency"     : int(info[0][1]) / 10.0,
            "voltage"       : int(info[0][7]) / 10.0,
            "current"       : int(info[0][8]) / 10.0,
            "power"         : int(info[0][9]),
            "output_load"   : int(info[0][10]),
        }

        parsed["Phase 3"] = {
            "frequency"     : int(info[0][1]) / 10.0,
            "voltage"       : int(info[0][11]) / 10.0,
            "current"       : int(info[0][12]) / 10.0,
            "power"         : int(info[0][13]),
            "output_load"   : int(info[0][14]),
        }

    return parsed


check_info['ups_modulys_outphase'] = {
    'parse_function'            : parse_ups_modulys_outphase,
    'inventory_function'        : inventory_elphase,
    'check_function'            : check_elphase,
    'service_description'       : 'Output %s',
    'has_perfdata'              : True,
    'default_levels_variable'   : 'ups_modulys_outphase_default_levels',
    'includes'                  : [ "elphase.include", ],
    'group'                     : 'ups_outphase',
    'snmp_info'                 : (".1.3.6.1.4.1.2254.2.4.5", [
                                        "1", # dupsOutputSource
                                        "2", # dupsOutputFrequency
                                        "3", # dupsOutputNumLines
                                        "4", # dupsOutputVoltage1
                                        "5", # dupsOutputCurrent1
                                        "6", # dupsOutputPower1
                                        "7", # dupsOutputLoad1
                                        "8", # dupsOutputVoltage2
                                        "9", # dupsOutputCurrent2
                                        "10", # dupsOutputPower2
                                        "11", # dupsOutputLoad2
                                        "12", # dupsOutputVoltage3
                                        "13", # dupsOutputCurrent3
                                        "14", # dupsOutputPower3
                                        "15", # dupsOutputLoad3
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.2254.2.4",
}
