#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def scan_didactum(oid):
    return "didactum" in oid(".1.3.6.1.2.1.1.1.0").lower()


# elements (not excatly sensors!) can be:
# temperature, analog voltage, usb-cam, reader, GSM modem, magnet,
# smoke, unknown, induct relay, pushbutton, timer
def parse_didactum_sensors(info):
    map_states = {
        "alarm"         : 2,
        "warning"       : 1,
        "normal"        : 0,
        "not connected" : 3,
        "on"            : 0,
        "off"           : 3,
    }

    parsed = {}
    for line in info:
        ty, name, status, value_str = line[:4]
        parsed.setdefault(ty, {})

        if value_str.isdigit():
            value = int(value_str)
        else:
            try:
                value = float(value_str)
            except:
                value = value_str

        parsed[ty].setdefault(name, {
            "state"          : map_states.get(status, 3),
            "state_readable" : status,
            "value"          : value,
        })

        if ty in [ "temperature", "voltage" ] and len(line) == 8:
            crit_lower, warn_lower, warn, crit = line[4:]
            parsed[ty][name].update({
                "levels"       : (float(warn),       float(crit)),
                "levels_lower" : (float(warn_lower), float(crit_lower)),
            })

    return parsed


def inventory_didactum_sensors(parsed, what):
    return [ (sensorname, {}) for sensorname, vals in parsed[what].items()
             if vals["state_readable"] not in [ "off", "not connected" ] ]
