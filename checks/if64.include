#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Common code of i64 and if64adm

def parse_if64(info):
    parsed = []
    for line in info:
        # some DLINK switches apparently report a broken interface with index 0,
        # filter that out
        if saveint(line[1]) > 0:
            # ifHighSpeed (idx 21) can't represent interfaces with less than  10^6 bit bandwidth,
            # ifSpeed (idx 4) is capped at 4GBit.
            # combine the two to get the actual interface speed
            if line[-1] == "0":
                real_speed = saveint(line[4])
            else:
                real_speed = saveint(line[-1]) * 1000000
            parsed.append(line[:4] + [real_speed] + line[5:-1])
    return parsed


def need_if64adm():
    settings = host_extra_conf_merged(g_hostname, inventory_if_rules)
    return "portstates" in settings and '9' in settings["portstates"]


def if64_scan_function(oid, use_if64adm):
    if need_if64adm() != use_if64adm:
        return False

    ignored_strings = [
        "LANCOM",
        "ELSA",
        "T-Systems",
        "Brocade VDX Switch",
    ]
    for string in ignored_strings:
        if string in oid(".1.3.6.1.2.1.1.1.0"):
            return False

    if ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0"):
        return False

    if if64_disabled(g_hostname):
        return False

    if oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None:
        return True
    return False


if64_snmp_end_oids = [
    "2.2.1.1",     # ifIndex                   0
    "2.2.1.2",     # ifDescr                   1
    "2.2.1.3",     # ifType                    2
    "2.2.1.5",     # ifSpeed                   3
    "2.2.1.8",     # ifOperStatus              4
    "31.1.1.1.6",  # ifHCInOctets              5
    "31.1.1.1.7",  # ifHCInUcastPkts           6
    "31.1.1.1.8",  # ifHCInMulticastPkts       7
    "31.1.1.1.9",  # ifHCInBroadcastPkts       8
    "2.2.1.13",    # ifInDiscards              9
    "2.2.1.14",    # ifInErrors               10
    "31.1.1.1.10", # ifHCOutOctets            11
    "31.1.1.1.11", # ifHCOutUcastPkts         12
    "31.1.1.1.12", # ifHCOutMulticastPkts     13
    "31.1.1.1.13", # ifHCOutBroadcastPkts     14
    "2.2.1.19",    # ifOutDiscards            15
    "2.2.1.20",    # ifOutErrors              16
    "2.2.1.21",    # ifOutQLen                17
    "31.1.1.1.18", # ifAlias                  18
    BINARY("2.2.1.6"),     # ifPhysAddress            19
    "31.1.1.1.15", # ifHighSpeed              -1  (parse_if64 assumes this is the last element)
]
