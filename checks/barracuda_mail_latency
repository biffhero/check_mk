#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.20632.2.5 2

# Suggested by customer, in seconds
barracuda_mail_latency_default_levels = (40, 60)


def inventory_barracuda_mail_latency(info):
    return [(None, "barracuda_mail_latency_default_levels" )]


def check_barracuda_mail_latency(_no_item, params, info):
    avg_mail_latency = int(info[0][0])
    state = 0
    infotext = "Average: %s" % get_age_human_readable(avg_mail_latency)

    warn, crit = params
    if avg_mail_latency >= crit:
        state = 2
    elif avg_mail_latency >= warn:
        state = 1
    if state:
        infotext += " (warn/crit at %s/%s)" % \
                    (get_age_human_readable(warn),
                     get_age_human_readable(crit))

    return state, infotext, [ ( "mail_latency", avg_mail_latency, warn, crit) ]


check_info['barracuda_mail_latency'] = {
    'inventory_function'        : inventory_barracuda_mail_latency,
    'check_function'            : check_barracuda_mail_latency,
    'service_description'       : 'Mail Latency',
    'has_perfdata'              : True,
    # The barracuda spam firewall does not response or returns a timeout error
    # executing 'snmpwalk' on whole tables. But we can workaround here specifying
    # all needed OIDs. Then we can use 'snmpget' and 'snmpwalk' on these single OIDs.
    'snmp_info'                 : (".1.3.6.1.4.1.20632.2", [ "5" ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.8072.3.2.10") and \
                                              "barracuda" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    'group'                     : "mail_latency",
}





