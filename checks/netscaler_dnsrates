#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.53.1.1.0  13
# .1.3.6.1.4.1.5951.4.1.1.53.1.2.0  11

factory_settings["netscaler_dnsrates_default_levels"] = {
    "query": (1500.0, 2000.0),
    "answer": (1500.0, 2000.0),
}

def inventory_netscaler_dnsrates(info):
    if info:
        return [ (None, 'netscaler_dnsrates_default_levels') ]

def check_netscaler_dnsrates(_no_item, params, info):
    queries, answers = map(int, info[0])

    now = time.time()
    for name, counter in [
        ( "query", queries ),
        ( "answer", answers ) ]:

        rate = get_rate(name, now, counter)
        warn, crit = params[name]
        infotext = "%s rate %.1f/sec" % (name, rate)
        perfdata = [ (name+"_rate", rate, warn, crit, 0) ]

        state = 0
        if rate >= crit:
            state = 2
        elif rate >= warn:
            state = 1
        if state > 0:
            infotext += " (warn/crit at %.1f/%.1f /sec)" % (warn, crit)

        yield state, infotext, perfdata

check_info["netscaler_dnsrates"] = {
    "check_function"          : check_netscaler_dnsrates,
    "inventory_function"      : inventory_netscaler_dnsrates,
    "service_description"     : "DNS rates",
    "has_perfdata"            : True,
    "group"                   : "netscaler_dnsrates",
    "snmp_info"               : (".1.3.6.1.4.1.5951.4.1.1.53.1", [ # nsDnsServerStatsGroup
                                            1, # dnsTotQueries
                                            2, # dnsTotAnswers
                                        ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
    "default_levels_variable" : "netscaler_dnsrates_default_levels",

}
