#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.2.1.1 1 --> PERLE-MCR-MGT-MIB::mcrPsmuIndex.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.2.1.2 2 --> PERLE-MCR-MGT-MIB::mcrPsmuIndex.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.3.1.1 MCR-ACPWR --> PERLE-MCR-MGT-MIB::mcrPsmuModelName.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.3.1.2 MCR-ACPWR --> PERLE-MCR-MGT-MIB::mcrPsmuModelName.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.5.1.1 104-101015T10175 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuSerialNumber.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.5.1.2 104-101015T10177 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuSerialNumber.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.9.1.1 1 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuStatus.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.9.1.2 1 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuStatus.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.10.1.1 12.05 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuVoltage.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.10.1.2 12.05 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuVoltage.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.11.1.1 6.75 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuPowerUsage.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.11.1.2 6.75 --> PERLE-MCR-MGT-MIB::mcrPsmuPsuPowerUsage.1.b
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.12.1.1 1 --> PERLE-MCR-MGT-MIB::mcrPsmuFanStatus.1.a
# .1.3.6.1.4.1.1966.21.1.1.1.1.2.1.12.1.2 1 --> PERLE-MCR-MGT-MIB::mcrPsmuFanStatus.1.b


def parse_perle_psmu(info):
    map_states = {
        "0" : (2, "not present"),
        "1" : (0, "good"),
        "2" : (2, "fail"),
    }

    parsed = {}
    for index, name, serial, psu_status, voltage_str, power_str, fan_status in info:
        parsed.setdefault("%s %s" % (index, name), {
            "serial"   : serial,
            "fanstate" : map_states[fan_status],
            "psustate" : map_states[psu_status],
            "power"    : float(power_str),
            "voltage"  : float(voltage_str)
        })

    return parsed


def inventory_perle_psmu(parsed, what_state, params=None):
    for unit, values in parsed.items():
        if values[what_state][1] != "not present":
            yield unit, params


def check_perle_psmu_powersupplies(item, params, parsed):
    if item in parsed:
        state, state_readable = parsed[item]["psustate"]
        yield state, "Status: %s" % state_readable
        for res in check_elphase(item, params, parsed):
            yield res


check_info['perle_psmu'] = {
    'parse_function'        : parse_perle_psmu,
    'inventory_function'    : lambda info: inventory_perle_psmu(info, "psustate", {}),
    'check_function'        : check_perle_psmu_powersupplies,
    'service_description'   : 'Power supply %s',
    # If you change snmp info please adapt the related inventory plugin
    'snmp_info'             : ('.1.3.6.1.4.1.1966.21.1.1.1.1.2.1', [
                                    '2',    # PERLE-MCR-MGT-MIB::mcrPsmuIndex
                                    '3',    # PERLE-MCR-MGT-MIB::mcrPsmuModelName
                                    '5',    # PERLE-MCR-MGT-MIB::mcrPsmuPsuSerialNumber
                                    '9',    # PERLE-MCR-MGT-MIB::mcrPsmuPsuStatus
                                    '10',   # PERLE-MCR-MGT-MIB::mcrPsmuPsuVoltageUsage
                                    '11',   # PERLE-MCR-MGT-MIB::mcrPsmuPsuPowerUsage
                                    '12',   # PERLE-MCR-MGT-MIB::mcrPsmuFanStatus
                              ]),
    'snmp_scan_function'    : perle_scan_function,
    'has_perfdata'          : True,
    'includes'              : [ 'elphase.include', 'perle.include' ],
    'group'                 : 'el_inphase',
}


def check_perle_psmu_fans(item, _no_params, parsed):
    if item in parsed:
        state, state_readable = parsed[item]["fanstate"]
        return state, "Status: %s" % state_readable


check_info['perle_psmu.fan'] = {
    'inventory_function'    : lambda info: inventory_perle_psmu(info, "fanstate", {}),
    'check_function'        : check_perle_psmu_fans,
    'service_description'   : 'Fan %s',
}
