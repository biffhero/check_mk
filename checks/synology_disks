#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_synology_disks(info):
    for disk, model, status, temperature in info:
        # SSD used as cache are "not initialized". We remember that
        # here.
        if "SSD" in model and status == '3':
            params = { "used_as_cache" : True }
        else:
            params = {}

        yield disk, params


def check_synology_disks(item, params, info):
    states = {
        1 : (0, "OK"),
        2 : (0, "OK"),
        3 : (1, "not initialized"),
        4 : (2, "system partition failed"),
        5 : (2, "crashed")

    }

    if params == None:
        params = {}

    for disk, model, status, temperature in info:
        if disk == item:
            temp = int(temperature)
            if status == '3' and params.get("used_as_cache"):
                status_text = "used as cache"
                status_code = 0
            else:
                status_code, status_text = states[int(status)]

            message = u"Status: %s, Temperature: %d Â°C, Model: %s" % ( status_text, temp, model )
            return status_code, message, [("temp", temp )]


check_info["synology_disks"] = {
    "check_function"        : check_synology_disks,
    "inventory_function"    : inventory_synology_disks,
    "service_description"   : "Disk %s",
    "has_perfdata"          : True,
    "snmp_scan_function"    : synology_scan_function,
    "snmp_info"             : (".1.3.6.1.4.1.6574.2.1.1", [
                                                      2, #Disk ID
                                                      3, #Disk Model
                                                      5, #Disk Status
                                                      6, #Disk Temperature
                                                   ]),
    "includes"              : [ "synology.include" ]
}

