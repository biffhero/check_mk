#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_storcli_vdrives(info):

    raid_statedict = {
        "Optl"      : "Optimal",
        "Pdgd"      : "Partially Degraded",
        "dgrd"      : "Degraded",
        "OfLn"      : "Offline",
        "Rec"       : "Recovery",
    }

    parsed = {}

    separator_count = 0
    for line in info:
        if line[0].startswith("-----"):
            separator_count += 1
        elif separator_count == 2:
            item, raid_type, rawstate, access, consistent = line[:5]
            parsed[item] = {
                "raid_type"     : raid_type,
                "state"         : raid_statedict.get(rawstate, rawstate),
                "access"        : access,
                "consistent"    : consistent,
            }
        if separator_count == 3:
            break

    return parsed


def inventory_storcli_vdrives(parsed):
    for item in parsed:
        yield (item, None)


def check_storcli_vdrives(item, _no_params, parsed):

    yield 0, "Raid type is " + parsed[item]["raid_type"]
    yield 0, "Access: " + parsed[item]["access"]

    if parsed[item]["consistent"] == "Yes":
        yield 0, "Drive is consistent"
    else:
        yield 1, "Drive is not consistent"

    device_state = parsed[item]["state"]
    infotext = "State is %s" % device_state
    if device_state == "Optimal":
        status = 0
    elif device_state == "Partially Degraded":
        status = 1
    elif device_state == "Degraded":
        status = 2
    elif device_state == "Offline":
        status = 1
    elif device_state == "Recovery":
        status = 1
    else:
        status = 3
    yield status, infotext


check_info["storcli_vdrives"] = {
    "parse_function"        : parse_storcli_vdrives,
    "inventory_function"    : inventory_storcli_vdrives,
    "check_function"        : check_storcli_vdrives,
    "service_description"   : "RAID Virtual Drive %s"
}
