#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.20632.2.2  0
# .1.3.6.1.4.1.20632.2.3  19
# .1.3.6.1.4.1.20632.2.4  17
# .1.3.6.1.4.1.20632.2.60 434

# Suggested by customer
factory_settings["barracuda_mailq_default_levels"] = {
    "deferred" : (80, 100),
    "active"   : (80, 100),
}


def inventory_barracuda_mailqueues(info):
    return [ ("", {}) ]


def check_barracuda_mailqueues(_no_item, params, info):
    in_queue_str, active_queue_str, deferred_queue_str, daily_sent = info[0]
    for queue_type, queue in [
        ("Active",   int(active_queue_str)),
        ("Deferred", int(deferred_queue_str)), ]:
        state = 0
        infotext = "%s: %s" % (queue_type, queue)
        warn, crit = params[queue_type.lower()]

        if queue >= crit:
            state = 2
        elif queue >= warn:
            state = 1
        if state:
            infotext += " (warn/crit at %d/%d %s mails)" % (warn, crit, queue_type.lower())

        yield state, infotext, [ ("mail_queue_%s_length" % queue_type.lower(), queue, warn, crit) ]

    yield 0, "Incoming: %s" % in_queue_str
    if daily_sent:
        yield 0, "Daily sent: %s" % daily_sent


check_info['barracuda_mailqueues'] = {
    'inventory_function'        : inventory_barracuda_mailqueues,
    'check_function'            : check_barracuda_mailqueues,
    'service_description'       : 'Mail Queue %s',
    'has_perfdata'              : True,
    # The barracuda spam firewall does not response or returns a timeout error
    # executing 'snmpwalk' on whole tables. But we can workaround here specifying
    # all needed OIDs. Then we can use 'snmpget' and 'snmpwalk' on these single OIDs.
    'snmp_info'                 : (".1.3.6.1.4.1.20632.2", [
                                        "2",  # inQueue
                                        "3",  # outQueue
                                        "4",  # deferredQueue
                                        "60", # dailySent
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.8072.3.2.10") and \
                                              "barracuda" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    'default_levels_variable'   : "barracuda_mailq_default_levels",
    'group'                     : "mail_queue_length",
}
