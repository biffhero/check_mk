#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.46.1.0  3
# .1.3.6.1.4.1.5951.4.1.1.46.2.0  16

factory_settings["netscaler_tcp_conns_default_levels"] = {
    "server_conns" : (25000, 30000),
    "client_conns" : (25000, 30000),
}

def inventory_netscaler_tcp_conns(info):
    if info:
        return[ (None, {}) ]

def check_netscaler_tcp_conns(_no_item, params, info):
    for name, index, infotext in [
            ("server_conns", 0, "Server Connections"),
            ("client_conns", 1, "Client Connections"),
        ]:
        value = int(info[0][index])
        infotext += ": %d" % value
        warn, crit = params[name]

        perfdata = [ (name, value, warn, crit, 0) ]

        state = 0
        if value >= crit:
            state = 2
        elif value >= warn:
            state = 1
        if state > 0:
            infotext += " (warn/crit at %d/%d)" % (warn,crit)

        yield state, infotext, perfdata

check_info["netscaler_tcp_conns"] = {
    "check_function"          : check_netscaler_tcp_conns,
    "inventory_function"      : inventory_netscaler_tcp_conns,
    "default_levels_variable" : "netscaler_tcp_conns_default_levels",
    "service_description"     : "TCP Connections",
    "has_perfdata"            : True,
    "group"                   : "netscaler_tcp_conns",
    "snmp_info"               : (".1.3.6.1.4.1.5951.4.1.1.46", [
                                            1, # tcpCurServerConn
                                            2, # tcpCurClientConn
                                        ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
