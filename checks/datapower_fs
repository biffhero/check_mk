#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_datapower_fs(info):
    if info:
        # only discover filesystems with a defined total size > 0
        if saveint(info[0][0]) != 0:
		yield "Encrypted", {}
        if saveint(info[0][2]) != 0:
		yield "Unencrypted", {}
        if saveint(info[0][4]) != 0:
		yield "Temporary", {}
        if saveint(info[0][6]) != 0:
		yield "Internal", {}

def check_datapower_fs(item, params, info):
    if item == "Encrypted":
        i = 0
    elif item == "Unencrypted":
        i = 2
    elif item == "Temporary":
        i = 4
    elif item == "Internal":
        i = 6

    avail_mb = float(info[0][i])
    size_mb = float(info[0][i+1])
    fslist = [(item, size_mb, avail_mb, 0)]

    return df_check_filesystem_list(item, params, fslist)

check_info["datapower_fs"] = {
    "inventory_function"      : inventory_datapower_fs,
    "check_function"          : check_datapower_fs,
    "service_description"     : "Filesystem %s",
    "includes"                : [ "df.include" ],
    "group"                   : "filesystem",
    "default_levels_variable" : "filesystem_default_levels",
    "has_perfdata"            : True,
    "snmp_info"               : ( ".1.3.6.1.4.1.14685.3.1.29", [
                                  "1",  # dpStatusFilesystemStatusFreeEncrypted
                                  "2",  # dpStatusFilesystemStatusTotalEncrypted
                                  "3",  # dpStatusFilesystemStatusFreeUnencrypted
                                  "4",  # dpStatusFilesystemStatusTotalUnencrypted
                                  "5",  # dpStatusFilesystemStatusFreeTemporary
                                  "6",  # dpStatusFilesystemStatusTotalTemporary
                                  "7",  # dpStatusFilesystemStatusFreeInternal
                                  "8",  # dpStatusFilesystemStatusTotalInternal
                              ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0") in [ ".1.3.6.1.4.1.14685.1.7",  ".1.3.6.1.4.1.14685.1.3" ],
}

