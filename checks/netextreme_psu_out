#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.1916.1.1.1.38.1.3.1.1 11960 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputVoltage.1.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.3.1.2 0 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputVoltage.1.2
# .1.3.6.1.4.1.1916.1.1.1.38.1.3.2.1 11990 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputVoltage.2.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.3.2.2 0 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputVoltage.2.2
# .1.3.6.1.4.1.1916.1.1.1.38.1.4.1.1 2900 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputCurrent.1.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.4.1.2 0 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputCurrent.1.2
# .1.3.6.1.4.1.1916.1.1.1.38.1.4.2.1 2260 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputCurrent.2.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.4.2.2 0 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputCurrent.2.2
# .1.3.6.1.4.1.1916.1.1.1.38.1.5.1.1 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputUnitMultiplier.1.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.5.1.2 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputUnitMultiplier.1.2
# .1.3.6.1.4.1.1916.1.1.1.38.1.5.2.1 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputUnitMultiplier.2.1
# .1.3.6.1.4.1.1916.1.1.1.38.1.5.2.2 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyOutputUnitMultiplier.2.2


# Just assumed
factory_settings["netextreme_psu_out_default_levels"] = {
    "voltage" : (11, 10),
    "current" : (4, 5),
}


def parse_netextreme_psu_out(info):
    parsed = {}
    for psu_index, psu_voltage_str, psu_current_str, psu_factor_str in info:
        psu_name = "Output %s" % psu_index
        psu_voltage = float(psu_voltage_str) * pow(10, int(psu_factor_str))
        psu_current = float(psu_current_str) * pow(10, int(psu_factor_str))
        # 0 in this field tells the psu doesnt support output voltage/current reading
        # or output voltage/current read error
        if float(psu_voltage_str) > 0 and float(psu_current_str) > 0:
            parsed[psu_name] = {
                "voltage" : psu_voltage,
                "current" : psu_current,
            }
        elif float(psu_voltage_str) > 0 and float(psu_current_str) == 0:
            parsed[psu_name] = {
                "voltage" : psu_voltage,
            }
        elif float(psu_voltage_str) == 0 and float(psu_current_str) > 0:
            parsed[psu_name] = {
                "current" : psu_current,
            }

    return parsed


check_info['netextreme_psu_out'] = {
    'parse_function'            : parse_netextreme_psu_out,
    'inventory_function'        : inventory_elphase,
    'check_function'            : check_elphase,
    'service_description'       : 'Power Supply %s',
    'has_perfdata'              : True,
    'snmp_info'                 : (".1.3.6.1.4.1.1916.1.1.1.38.1", [
                                        OID_END, # Power Supply Index
                                        "3",     # extremePowerSupplyOutputVoltage
                                        "4",     # extremePowerSupplyOutputCurrent
                                        "5",     # extremePowerSupplyOutputUnitMultiplier
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1916.2"),
    'group'                     : "el_inphase",
    'default_levels_variable'   : "netextreme_psu_out_default_levels",
    'includes'                  : [ "elphase.include" ],
}
