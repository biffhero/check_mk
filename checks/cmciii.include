#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def cmciii_get_unit_number(units,unit_name):
    namelist = map(list, zip(*units))[1]
    if unit_name in namelist:
        return str(namelist.index(unit_name)+1)

def extract_cmciii_lcp_temps(liste):
    miste = []
    for l in liste:
        try:
            miste.append(float(l.split(" ")[0]))
        except ValueError:
            # Dirty hack fix for a dirty check. Ignore all values that can not be
            # converted to floats
            # sh: introduced by lm. But why?
            pass
    return miste

def translate_cmciii_lcp_status(status):
    statusl = status.lower()
    if statusl == "ok":
        return 0
    elif statusl == "warning":
        return 1
    else:
        return 3

def inventory_cmciii_lcp_fanunit(zone, direction, info):
    # these checks are considered obsolete as temp_in_out covers the same
    # information
    return []
    #if info:
    #    return [ ("%s LCP Fanunit %s Average" % (zone, direction), {}) ]

def check_cmciii_lcp_fanunit(item, params, info):
    if params == None:
        params = {}
    unit_desc, unit_status, desc, status = info[0][0:4]
    temps = extract_cmciii_lcp_temps(info[0][4:])

    status, message, perfdata = check_temperature(
        temps[4], params, "cmciii_lcp_fanunit_%s" % item,
        dev_status=translate_cmciii_lcp_status(unit_status),
        dev_status_name="Unit: %s" % unit_status,
        dev_levels=(temps[2], temps[3]),
        dev_levels_lower=(temps[1], temps[0])
    )

    output_unit = params.get("output_unit", "c")

    message += " ; Top/Mid/Bottom: %s/%s/%s" %\
        (render_temp(temps[5], output_unit),
         render_temp(temps[6], output_unit),
         render_temp(temps[7], output_unit))

    return status, message, perfdata

def snmp_scan_cmciii_lcp_fanunit(oid):
    return oid(".1.3.6.1.2.1.1.1.0").startswith("Rittal LCP") and \
        oid(".1.3.6.1.4.1.2606.7.4.2.2.1.3.2.6").startswith("Air.Temperature.DescName")

