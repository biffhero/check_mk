#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_datapower_raid_bat(info):
    for controller_id, bat_type, serial, name, status in info:
        yield controller_id, None

def check_datapower_raid_bat(item, _no_params, info):
    datapower_raid_bat_status = {
        "1":  (0, "charging"),
        "2":  (1, "discharging"),
        "3":  (2, "i2c errors detected"),
        "4":  (0, "learn cycle active"),
        "5":  (2, "learn cycle failed"),
        "6":  (0, "learn cycle requested"),
        "7":  (2, "learn cycle timeout"),
        "8":  (2, "pack missing"),
        "9":  (2, "temperature high"),
        "10": (2, "voltage low"),
        "11": (1, "periodic learn required"),
        "12": (1, "remaining capacity low"),
        "13": (2, "replace pack"),
        "14": (0, "normal"),
        "15": (1, "undefined"),
    }
    datapower_raid_bat_type = {
        "1": "no battery present",
        "2": "ibbu",
        "3": "bbu",
        "4": "zcrLegacyBBU",
        "5": "itbbu3",
        "6": "ibbu08",
        "7": "unknown",
    }
    for controller_id, bat_type, serial, name, status in info:
        if item == controller_id:
            state, state_txt = datapower_raid_bat_status[status]
            type_txt = datapower_raid_bat_type[bat_type]
            infotext = "Status: %s, Name: %s, Type: %s, Serial: %s" \
                    % (state_txt, name, type_txt, serial)
            return state, infotext

check_info['datapower_raid_bat'] = {
  "inventory_function"      : inventory_datapower_raid_bat,
  "check_function"          : check_datapower_raid_bat,
  "service_description"     : "Raid Battery %s",
  "snmp_info"               : ( ".1.3.6.1.4.1.14685.3.1.258.1", [
                                  "1",  # dpStatusRaidBatteryBackUpStatusControllerID
                                  "2",  # dpStatusRaidBatteryBackUpStatusBatteryType
                                  "3",  # dpStatusRaidBatteryBackUpStatusSerial
                                  "4",  # dpStatusRaidBatteryBackUpStatusName
                                  "5",  # dpStatusRaidBatteryBackUpStatusStatus
                              ]),
  "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0") in [ ".1.3.6.1.4.1.14685.1.7",  ".1.3.6.1.4.1.14685.1.3" ],
}
