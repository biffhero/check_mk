#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_raritan_pdu_inlet(info):
    precisions = dict([(oid_end, int(decimals)) for oid_end, decimals in info[0]])
    parsed = {}
    for oid_end, availability, sensor_state, value in info[1]:
        if availability == '1':
            phase_id, sensor_type = oid_end.split('.')[2:4]
            phase = "Phase " + phase_id
            if sensor_type in raritan_map_type:
                parsed.setdefault(phase, {})
                key, key_info = raritan_map_type[sensor_type] # get key for elphase.include
                value = float(value) / 10 ** precisions[oid_end]
                state, state_info = raritan_map_state[sensor_state]

                if state > 0:
                    parsed[phase][key] = (value, (state, state_info))
                else:
                    parsed[phase][key] = (value, None)
    return parsed


def check_raritan_pdu_inlet(item, params, info):
    if not item.startswith("Phase"):
        item = "Phase %s" % item
    for res in check_elphase(item, params, info):
        yield res


check_info['raritan_pdu_inlet'] = {
  "parse_function"      : parse_raritan_pdu_inlet,
  "inventory_function"  : inventory_elphase,
  "check_function"      : check_raritan_pdu_inlet,
  "service_description" : "Input %s",
  "has_perfdata"        : True,
  "group"               : "el_inphase",
  "snmp_info"           : [ (".1.3.6.1.4.1.13742.6.3.3.6.1",
                                    [ OID_END,
                                      "7", # inletPoleSensorDecimalDigits
                            ]),
                            (".1.3.6.1.4.1.13742.6.5.2.4.1",
                                    [ OID_END,
                                       2, # availability
                                       3, # state
                                       4, # value
                            ])],
  "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.6",
  "includes"            : [ 'raritan.include', 'elphase.include' ]
}
